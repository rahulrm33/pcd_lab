training = []
output_empty = [0] * len(classes)
for doc in documents:
 bag = []
 pattern_words = doc[0]
pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]
for w in words:
bag.append(1) if w in pattern_words else bag.append(0)
output_row = list(output_empty)
output_row[classes.index(doc[1])] = 1
training.append([bag, output_row])
random.shuffle(training)
training = np.array(training)
train_x = list(training[:,0])
train_y = list(training[:,1])
print("Training data created")
model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy'])
hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)
model.save('chatbot_model.h5', hist)
print("model created def clean_up_sentence(sentence):
 sentence_words = nltk.word_tokenize(sentence)
 sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
 return sentence_words
def bow(sentence, words, show_details=True):
 # tokenize the pattern
 sentence_words = clean_up_sentence(sentence)
 bag = [0]*len(words)
 for s in sentence_words:
 for i,w in enumerate(words):
 if w == s:
 # assign 1 if current word is in the vocabulary position
 bag[i] = 1
 if show_details:
 print ("found in bag: %s" % w)
 return(np.array(bag))
def predict_class(sentence, model):
 p = bow(sentence, words,show_details=False)
 res = model.predict(np.array([p]))[0]
 ERROR_THRESHOLD = 0.25
 results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]
 results.sort(key=lambda x: x[1], reverse=True)
 return_list = []
 for r in results:
 return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
 return return_list
def getResponse(ints, intents_json):
 tag = ints[0]['intent']
 list_of_intents = intents_json['intents']
 for i in list_of_intents:
 if(i['tag']== tag):
 result = random.choice(i['responses'])
 break
 return result
def chatbot_response(msg):
 ints = predict_class(msg, model)
 res = getResponse(ints, intents)
 return res")
